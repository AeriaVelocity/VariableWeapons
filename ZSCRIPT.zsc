version "4.0"

class VDoomPlayer : DoomPlayer
{
	Default
	{
		Player.StartItem "HandCannon";
		Player.StartItem "CombinationFist";
		Player.StartItem "Clip", 50;
		Player.WeaponSlot 1, "CombinationFist", "Chainsaw";
		Player.WeaponSlot 2, "HandCannon";
		Player.WeaponSlot 3, "AccurateShotgun", "SuperDuperShotgun";
		Player.WeaponSlot 4, "StunlockerChaingun";
		Player.WeaponSlot 5, "FastRocketLauncher";
		Player.WeaponSlot 6, "PlasmaHybrid";
		Player.WeaponSlot 7, "BFG24336000";
	}
	override void Tick()
	{
		A_TakeInventory("MShiftCooldown", 1);
		Super.Tick();
	}
}

class CombinationFist : Fist
{
	int charge;
	Default
	{
		Weapon.KickBack 1000000;
		+Weapon.NoAlert
		+Weapon.NoAutoFire
		Tag "Combo Fist";
	}
	States
	{
		Fire:
			PUNG B 1 { if (invoker.charge <= 15) invoker.charge += 1; }
			TNT1 A 0 A_ReFire();
		Punch:
			PUNG C 3 {
                int damage_addition = 20;
                string puff_type = "PunchEm";
                int range = 64;
                double lifesteal = 0.0;
                string punch_sound = "*fist";
                string miss_sound = "skeleton/swing";

				if (CountInv("PowerStrength")) {
                    damage_addition = 80;
                    puff_type = "SmashEm";
                    range = 128;
                    lifesteal = 0.0;
                    punch_sound = "skeleton/melee";
				}

				invoker.charge = 0;

				A_AlertMonsters(10);
                A_CustomPunch(damage_addition + invoker.charge * 2, false, 0, puff_type, range, lifesteal, 0, "ArmorBonus", punch_sound, miss_sound);
			}
			PUNG DDDDD 1 { if (CountInv("PowerStrength")) { A_WeaponReady(); } }
			PUNG CCCC 1 A_WeaponReady();
			PUNG B 3;
			Goto Ready;
		AltFire:
			PUNG B 7 {
				if (CountInv("MShiftCooldown") > 0) return ResolveState("Ready");
				DamageFactor = 0;
				
				int forward = GetPlayerInput(MODINPUT_FORWARDMOVE) / 6400;
				int sidem	= GetPlayerInput(MODINPUT_SIDEMOVE) / 6144;
				
				if (forward || sidem) {
					A_StartSound("weapons/rocklf");
					if (CountInv("PowerStrength")) {
						if (Health > 29) A_DamageSelf(10, "None", DMSS_NOFACTOR);
					}
					else {
						A_SetInventory("MShiftCooldown", 100);
					}
					A_ChangeVelocity(15 * forward, -20 * sidem, 0, CVF_Relative|CVF_Replace);
				}
				else {
					A_StartSound("weapons/bfgx");
					if (!CountInv("PowerStrength")) A_SetInventory("MShiftCooldown", 25);
					A_Stop();
				}
				return ResolveState(null);
			}
			PUNG B 1 { 
				DamageFactor = 1;
				if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ALTATTACK) return ResolveState("Punch");
				else return ResolveState(null);
			}
			Goto Ready;
	}
}

class HandCannon : Pistol replaces Pistol
{
	Default
	{
		Tag "Hand Cannon";
		Weapon.KickBack 0;
	}
	States
	{
		Fire:
			PISG B 7
			{
				A_FireBullets(5, 3, -1, 30, "VBulletPuff");
				A_PlaySound("weapons/pistol", CHAN_WEAPON);
				A_GunFlash();
			}
			PISG CCCCAAAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_ReFire;
			Goto Ready;
	}
}

class AccurateShotgun : Shotgun replaces Shotgun
{
	Default
	{
		+Weapon.NoAlert;
		+Weapon.NoAutoFire
		Weapon.AmmoUse2 2;
		Weapon.AmmoType2 "Shell";
		Tag "Accurate Shotgun";
		Inventory.PickupMessage "You grab a shotgun.";
	}
	States
	{
		Fire:
			SHTG A 3;
			SHTG A 7
			{
				A_FireBullets(1.2, 0, 7, 10, "VBulletPuff");
				A_PlaySound("weapons/shotgf", CHAN_WEAPON);
				A_GunFlash();
				A_AlertMonsters();
			}
			SHTG A 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			SHTG BC 5;
			SHTG D 4;
			SHTG CB 5;
			SHTG A 3;
			SHTG A 7 A_ReFire();
			Goto Ready;
		AltFire:
			SHTG A 1 {
				A_ZoomFactor(4.0);
				if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK) {
					return ResolveState("ZoomedFire");
				}
				return ResolveState(null);
			}
			TNT1 A 0 A_ReFire();
			SHTG A 1 A_ZoomFactor(1.0);
			Goto Ready;
		ZoomedFire:
			SHTG A 3;
			SHTG A 6
			{
				A_FireBullets(0, 0, 14, 10, "VBulletPuff");
				A_PlaySound("weapons/pistol",  CHAN_BODY);
				A_PlaySound("weapons/shotgfz", CHAN_WEAPON);
				A_GunFlash();
				A_AlertMonsters();
			}
			SHTG A 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_ZoomFactor(1.0);
			SHTG BC 5;
			SHTG D 4 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			SHTG CDCB 5;
			SHTG A 3;
			SHTG A 7 A_ReFire();
			Goto Ready;
	}
}

class SuperDuperShotgun : SuperShotgun replaces SuperShotgun
{
	Default
	{
		Tag "Super Duper Shotgun";
		Inventory.PickupMessage "You grab your super duper shotgun.";
	}
	States
	{
		Fire:
			SHT2 A 3;
			SHT2 A 7
			{
				string PuffType = "VBulletPuff";
				if (A_CheckLOF("Null", CLOFF_JUMP_ON_MISS, 128)) {
					PuffType = "VGibPuff";
				}
				A_FireBullets(20, 10, 15, 30, PuffType);
				A_FireBullets(5, 5, 15, 15, PuffType);
				A_PlaySound("weapons/sshotf", CHAN_WEAPON);
				A_ChangeVelocity(Cos(Pitch) * -10, 0, Sin(Pitch) * 10, CVF_Relative);
				A_GunFlash();
			}
			SHT2 AAAAAAAAABBB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			SHT2 C 3 A_CheckReload();
			SHT2 D 3 A_OpenShotgun2();
			SHT2 E 5;
			SHT2 F 3 A_LoadShotgun2();
			SHT2 D 3;
			SHT2 E 5;
			SHT2 F 3 A_LoadShotgun2();
			SHT2 G 7;
			SHT2 H 2 A_CloseShotgun2();
			SHT2 A 4;
			TNT1 A 0 A_ReFire();
			Goto Ready;
	}
}

class StunlockerChaingun : Chaingun replaces Chaingun
{
	Default
	{
		Tag "Stunlocker Chaingun";
		Inventory.PickupMessage "You grab a chaingun.";
	}
	States
	{
		Fire:
			CHGG A 3
			{
				A_FireBullets(7, 2, -1, 5, "VBulletPuff");
				A_PlaySound("weapons/chngun", CHAN_WEAPON);
				A_GunFlash();
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			}
			CHGG B 3
			{
				A_FireBullets(7, 2, -1, 5, "VBulletPuff");
				A_PlaySound("weapons/chngun", CHAN_WEAPON);
				A_GunFlash("Flash2");
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			}
			CHGG B 0 A_ReFire();
			Goto Ready;
		Flash:
			CHGF A 2 Bright A_Light1;
			Goto LightDone;
		Flash2:
			CHGF B 2 Bright A_Light2;
			Goto LightDone;
	}
}

class FastRocketLauncher : RocketLauncher replaces RocketLauncher
{
	Default
	{
		Weapon.AmmoGive 10;
		Tag "Speed Rocket Launcher";
		Inventory.PickupMessage "You grab a rocket launcher.";
	}
	States
	{
		Fire:
			MISG B 4 A_GunFlash();
			MISG B 1 A_FireProjectile("SpeedRocket");
			MISG BBBBBBB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_ReFire;
			Goto Ready;
		Flash:
			MISF A 2 Bright A_Light1;
			MISF B 2 Bright;
			MISF CD 2 Bright A_Light2;
			Goto LightDone;
	}
}

class OverpoweredPlasmaBall : PlasmaBall
{
    Default
    {
        Decal "PlasmaScorch";
        Damage 40;
        Speed 30;
    }
}

class SilentPlasmaBall : OverpoweredPlasmaBall
{
	Default
	{
		SeeSound "";
		Decal "PlasmaScorch";
	}
}

class PlasmaHybrid : PlasmaRifle replaces PlasmaRifle
{
	Default
	{
		Inventory.PickupMessage "You grab a plasma cannon.";
		Tag "Hybrid Plasma Cannon";
		Weapon.AmmoUse2 1;
		Weapon.AmmoType2 "Cell";
	}
	States
	{
		Fire:
			PLSG AAA 2 A_FireProjectile("OverpoweredPlasmaBall");
			PLSG A 10;
			PLSG B 20 A_ReFire();
			Goto Ready;
		AltFire:
			PLSG A 5 {
				A_FireProjectile("OverpoweredPlasmaBall", random(-20, 20), true, 0, 0, 0, random(-10, 10));
				for (int x = 0; x < 24; x++) {
					A_FireProjectile("SilentPlasmaBall", random(-20, 20), true, 0, 0, 0, random(-10, 10));
				}
				A_GunFlash();
			}
			PLSG BBBBBBBBBBBBBBBBBBBBBBBBB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		Flash:
			PLSF A 4 Bright A_Light1;
			Goto LightDone;
			PLSF B 4 Bright A_Light1;
			Goto LightDone;
		Spawn:
			PLAS A -1;
			Stop;
	}
}

class BFG24336000 : BFG9000 replaces BFG9000
{
	Default
	{
		Inventory.PickupMessage "You grab the BFG 24336000. Time to party!";
		Weapon.AmmoUse 1;
		Tag "BFG 24336000";
	}
	States
	{
		Fire:
			BFGG A 20 A_BFGSound();
			BFGG B 10 A_GunFlash();
			BFGG BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB 1 A_FireProjectile("SmolBFGBall", random(-10, 10), true, 0, 0, 0, random(-5, 5));
			BFGG B 1 A_FireBFG();
			BFGG B 50 A_ReFire();
			Goto Ready;
	}
}

class SpeedRocket : Rocket
{
	Default
	{
		Speed 40;
		Damage 10;
		+ExtremeDeath
	}
	States
	{
		Death:
			MISL B 6 Bright A_Explode;
			MISL C 4 Bright;
			MISL D 2 Bright;
			Stop;
	}
}

class SmolBFGBall : PlasmaBall
{
	Default
	{
		Scale 0.25;
		Speed 35;
		Damage 4;
		BounceType "Classic";
		BounceFactor 1.0;
		Obituary "$OB_MPBFG_MBF";
	}
	States
	{
		Spawn:
			BFS1 AB 6 Bright;
			Loop;
		Death:
			BFE1 AB 4 Bright;
			BFE1 C 4 Bright A_BFGSpray("BFGExtra", 10, 5);
			BFE1 DEF 4 Bright;
			Stop;
	}
}

class VBulletPuff : Actor
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+ZDOOMTRANS
		+NOEXTREMEDEATH
		+PUFFONACTORS
		RenderStyle "Translucent";
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
	}
	States
	{
	Spawn:
		PUFF A 4 Bright;
		PUFF B 4;
	Melee:
		PUFF CD 4;
		Stop;
	}
}

class VGibPuff : Actor
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+ZDOOMTRANS
		+EXTREMEDEATH
		+PUFFONACTORS
		RenderStyle "Translucent";
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
	}
	States
	{
	Spawn:
		RPUF A 4 Bright;
		RPUF B 4;
	Melee:
		PUFF CD 4;
		Stop;
	}
}

class PunchEm : Actor
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+ZDOOMTRANS
		+PUFFONACTORS
		RenderStyle "None";
		Alpha 0;
		VSpeed 0;
		Mass 0;
	}
	States
	{
		Spawn:
			TNT1 A 0;
		Melee:
			TNT1 A 0;
			Stop;
	}
}

class SmashEm : PunchEm
{
	Default
	{
		+EXTREMEDEATH
	}
}

class BigBoxoRocks : RocketBox replaces RocketBox
{
	Default
	{
		Inventory.Amount 25;
	}
}

class BigBackpack : CustomInventory replaces Backpack
{
	Default
	{
		+CountItem;
		+Inventory.AlwaysPickup;
		Inventory.PickupMessage "Stole some stuff from a backpack.";
	}
	States
	{
		Spawn:
			BPAK A -1;
			Stop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("Backpack");
				A_GiveInventory("Clip", 40);
				A_GiveInventory("Shell", 6);
				A_GiveInventory("RocketAmmo", 24);
				A_GiveInventory("Cell", 40);
			}
			Stop;
	}
}

class Bloodlust : CustomInventory replaces Berserk
{
	Default
	{
		+CountItem;
		+Inventory.AlwaysPickup;
		Inventory.PickupMessage "Bloodlust!";
		Inventory.PickupSound "misc/p_pkup";
	}
	States
	{
		Spawn:
			PSTR A -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				A_SetMugShotState("Grin");
				A_PlaySound("doomguy/taunt");
				A_GiveInventory("BloodlustGiver");
				HealThing(100, 0);
				A_SelectWeapon("CombinationFist");
			}
			Stop;
	}
}

class BloodlustGiver : PowerupGiver
{
	Default
	{
		Inventory.MaxAmount 0;
		Powerup.Color "None";
		Powerup.Type "PowerStrength";
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.AUTOACTIVATE
	}
}

class MShiftCooldown : Inventory
{
	Default
	{
		Inventory.MaxAmount 100;
	}
}